// <auto-generated />
using System;
using EFCoreDemo.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFCoreDemo.Migrations
{
    [DbContext(typeof(PatientsContext))]
    partial class PatientsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EFCoreDemo.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("AddressID");

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Address");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("AddressId");

                    b.HasIndex("PatientId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("EFCoreDemo.Models.EmailAddress", b =>
                {
                    b.Property<int>("EmailId")
                        .HasColumnType("int")
                        .HasColumnName("EmailID");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.HasKey("EmailId");

                    b.HasIndex("PatientId");

                    b.ToTable("EmailAddresses");
                });

            modelBuilder.Entity("EFCoreDemo.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Gender")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("PatientId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("EFCoreDemo.Models.PhoneNumber", b =>
                {
                    b.Property<int>("PhoneId")
                        .HasColumnType("int")
                        .HasColumnName("PhoneID");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<string>("PhoneNumber1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PhoneNumber");

                    b.Property<string>("PhoneType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("PhoneId");

                    b.HasIndex("PatientId");

                    b.ToTable("PhoneNumbers");
                });

            modelBuilder.Entity("EFCoreDemo.Models.Address", b =>
                {
                    b.HasOne("EFCoreDemo.Models.Patient", "Patient")
                        .WithMany("Addresses")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("FK_Addresses_Patients");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("EFCoreDemo.Models.EmailAddress", b =>
                {
                    b.HasOne("EFCoreDemo.Models.Patient", "Patient")
                        .WithMany("EmailAddresses")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("FK_EmailAddresses_Patients");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("EFCoreDemo.Models.PhoneNumber", b =>
                {
                    b.HasOne("EFCoreDemo.Models.Patient", "Patient")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("FK_PhoneNumbers_Patients");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("EFCoreDemo.Models.Patient", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("EmailAddresses");

                    b.Navigation("PhoneNumbers");
                });
#pragma warning restore 612, 618
        }
    }
}
